
LCD_FIRST_SIMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000021a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800208  00800208  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cb  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0b  00000000  00000000  00001543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000472  00000000  00000000  0000224e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000026c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099d  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001af  00000000  00000000  000030f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e1       	ldi	r30, 0x1A	; 26
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 30       	cpi	r26, 0x0B	; 11
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	5d d0       	rcall	.+186    	; 0x1da <main>
 120:	7a c0       	rjmp	.+244    	; 0x216 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Lcd_Pines_Init>:
	Lcd_Send_Byte(_function_set.function_set_control);
}

void Lcd_Pines_Init (void)
{
	LCD_CONTROL_DDR |= MASK_PINES_CONTROL; // Pines de control como salida
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	8e 60       	ori	r24, 0x0E	; 14
 128:	8a b9       	out	0x0a, r24	; 10
	LCD_DATA_DDR |= 0xFF; // Pines de datos como salida
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	84 b9       	out	0x04, r24	; 4
 130:	08 95       	ret

00000132 <Lcd_Send_Byte>:
} 

void Lcd_Send_Byte (char dato)
{
	LCD_DATA_PORT = dato;
 132:	85 b9       	out	0x05, r24	; 5
	LCD_TOGGLE_EN();
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	88 60       	ori	r24, 0x08	; 8
 138:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e9       	ldi	r24, 0x9F	; 159
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <Lcd_Send_Byte+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <Lcd_Send_Byte+0x12>
 144:	00 00       	nop
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	87 7f       	andi	r24, 0xF7	; 247
 14a:	8b b9       	out	0x0b, r24	; 11
 14c:	08 95       	ret

0000014e <Lcd_Display_Byte>:
	}
}

void Lcd_Display_Byte (char dato)
{
	LCD_CHARAC_MODE();
 14e:	9b b1       	in	r25, 0x0b	; 11
 150:	92 60       	ori	r25, 0x02	; 2
 152:	9b b9       	out	0x0b, r25	; 11
	Lcd_Send_Byte(dato); // Mandamos el caracter a mostrar
 154:	ee cf       	rjmp	.-36     	; 0x132 <Lcd_Send_Byte>
 156:	08 95       	ret

00000158 <Lcd_Display_String>:
}

/* Definición de funciones */

void Lcd_Display_String (char *cadena)
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	8c 01       	movw	r16, r24
	uint8_t contador = 0;
 160:	c0 e0       	ldi	r28, 0x00	; 0
	while (cadena[contador] != '\0')
 162:	02 c0       	rjmp	.+4      	; 0x168 <Lcd_Display_String+0x10>
	{
		Lcd_Display_Byte(cadena[contador]);
 164:	f4 df       	rcall	.-24     	; 0x14e <Lcd_Display_Byte>
		contador++;
 166:	cf 5f       	subi	r28, 0xFF	; 255
/* Definición de funciones */

void Lcd_Display_String (char *cadena)
{
	uint8_t contador = 0;
	while (cadena[contador] != '\0')
 168:	f8 01       	movw	r30, r16
 16a:	ec 0f       	add	r30, r28
 16c:	f1 1d       	adc	r31, r1
 16e:	80 81       	ld	r24, Z
 170:	81 11       	cpse	r24, r1
 172:	f8 cf       	rjmp	.-16     	; 0x164 <Lcd_Display_String+0xc>
	{
		Lcd_Display_Byte(cadena[contador]);
		contador++;
	}
}
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <Lcd_Cursor_Set>:
}

void Lcd_Cursor_Set (_fila_lcd fila, _columna_lcd columna)
{
	uint8_t base_pos = 0x00;
	if (!fila)
 17c:	81 11       	cpse	r24, r1
 17e:	02 c0       	rjmp	.+4      	; 0x184 <Lcd_Cursor_Set+0x8>
	{
		base_pos = 0x80; // Primera fila
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	01 c0       	rjmp	.+2      	; 0x186 <Lcd_Cursor_Set+0xa>
	}
	else
	{
		base_pos = 0xC0; // Segunda filas
 184:	80 ec       	ldi	r24, 0xC0	; 192
	}
	
	base_pos += columna; // Adición de colunmas
	LCD_COMAND_MODE(); // Entramos a modo comando
 186:	9b b1       	in	r25, 0x0b	; 11
 188:	9d 7f       	andi	r25, 0xFD	; 253
 18a:	9b b9       	out	0x0b, r25	; 11
	Lcd_Send_Byte(base_pos);
 18c:	86 0f       	add	r24, r22
 18e:	d1 df       	rcall	.-94     	; 0x132 <Lcd_Send_Byte>
	LCD_CHARAC_MODE(); // Salimos a modo caracter
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	82 60       	ori	r24, 0x02	; 2
 194:	8b b9       	out	0x0b, r24	; 11
 196:	08 95       	ret

00000198 <Lcd_Init_Conf>:
}

void Lcd_Init_Conf (void)
{
	/* Iniciamos la configuración del LCD */
	LCD_CONTROL_PORT &= ~(1 << LCD_PIN_RW);
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	8b b9       	out	0x0b, r24	; 11
	LCD_COMAND_MODE();
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	8b b9       	out	0x0b, r24	; 11
	Lcd_Send_Byte(COMAND_CLEAR_LCD);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	c5 df       	rcall	.-118    	; 0x132 <Lcd_Send_Byte>
	Lcd_Send_Byte(COMAND_RETURN_HOME_LCD);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	c3 df       	rcall	.-122    	; 0x132 <Lcd_Send_Byte>
	_entry_mode._entry_mode_bits.entry_mode_set_db2 = 1;
 1ac:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
	_entry_mode._entry_mode_bits.entry_mode_set_id = 0;
 1b0:	84 60       	ori	r24, 0x04	; 4
	_entry_mode._entry_mode_bits.entry_mode_set_sh = 1;
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
	Lcd_Send_Byte(_entry_mode.entry_mode_set);
 1ba:	bb df       	rcall	.-138    	; 0x132 <Lcd_Send_Byte>
	_display_on_off._display_on_off_bits.display_on_off_control_db3 = 1;
 1bc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_display_on_off>
	_display_on_off._display_on_off_bits.display_on_off_control_D = 1; // Display ON
	_display_on_off._display_on_off_bits.display_on_off_control_C = 1; // Cursor ON
	_display_on_off._display_on_off_bits.display_on_off_control_B = 0; // Blink ON
 1c0:	8e 60       	ori	r24, 0x0E	; 14
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_display_on_off>
	Lcd_Send_Byte(_display_on_off.display_on_off_control);
 1c8:	b4 df       	rcall	.-152    	; 0x132 <Lcd_Send_Byte>
	_function_set._function_set_bits.function_set_control_db5 = 1;
 1ca:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_function_set>
	_function_set._function_set_bits.function_set_control_dl = 1; // Trabajamos a 8 bits
	_function_set._function_set_bits.function_set_control_n = 1; // Matriz de 5x11
	_function_set._function_set_bits.function_set_control_f = 1; // Trabajamos a 2 lineas
 1ce:	88 63       	ori	r24, 0x38	; 56
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_function_set>
	Lcd_Send_Byte(_function_set.function_set_control);
 1d6:	ad cf       	rjmp	.-166    	; 0x132 <Lcd_Send_Byte>
 1d8:	08 95       	ret

000001da <main>:
/* Principal */

int main(void)
{
	/* Manejo de pines secundarios */
	LED_AS_OUTPUT();
 1da:	8a b1       	in	r24, 0x0a	; 10
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	8a b9       	out	0x0a, r24	; 10
	
	/* Manejo del LCD */
	Lcd_Pines_Init(); // Iniciamos los pines del LCD
 1e0:	a1 df       	rcall	.-190    	; 0x124 <Lcd_Pines_Init>
	Lcd_Init_Conf(); // Iniciamos el LCD
 1e2:	da df       	rcall	.-76     	; 0x198 <Lcd_Init_Conf>
 1e4:	60 e0       	ldi	r22, 0x00	; 0
	
	/* Mandaremos los caracteres */
	Lcd_Cursor_Set(LCD_1_FIL, LCD_1_COL);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	c9 df       	rcall	.-110    	; 0x17c <Lcd_Cursor_Set>
	Lcd_Display_Byte('b');
 1ea:	82 e6       	ldi	r24, 0x62	; 98
 1ec:	b0 df       	rcall	.-160    	; 0x14e <Lcd_Display_Byte>
	Lcd_Cursor_Set(LCD_2_FIL, LCD_1_COL);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	c4 df       	rcall	.-120    	; 0x17c <Lcd_Cursor_Set>
	Lcd_Display_String("Hola :)");
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	af df       	rcall	.-162    	; 0x158 <Lcd_Display_String>
 1fa:	9b b1       	in	r25, 0x0b	; 11
	
	while (1)
	{
		LED_PORT ^= (1 << LED);
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	89 27       	eor	r24, r25
 200:	8b b9       	out	0x0b, r24	; 11
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	83 ed       	ldi	r24, 0xD3	; 211
 206:	90 e3       	ldi	r25, 0x30	; 48
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x2e>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x38>
 212:	00 00       	nop
 214:	f2 cf       	rjmp	.-28     	; 0x1fa <main+0x20>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
