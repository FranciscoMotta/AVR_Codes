
CLAVE_MATRIX_SWT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800200  00000500  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000500  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800278  00800278  0000060c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016bc  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e20  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000654  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bae  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023b  00000000  00000000  00003e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000040d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 37       	cpi	r26, 0x78	; 120
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e7       	ldi	r26, 0x78	; 120
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 38       	cpi	r26, 0x8D	; 141
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2a d0       	rcall	.+84     	; 0x174 <main>
 120:	ed c1       	rjmp	.+986    	; 0x4fc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <UART_Init_Local>:

/* Definición de funciones */

void UART_Init_Local (void)
{
	my_uart.baudios = BAUDRATE_9600;
 124:	ee e7       	ldi	r30, 0x7E	; 126
 126:	f2 e0       	ldi	r31, 0x02	; 2
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	95 e2       	ldi	r25, 0x25	; 37
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	83 87       	std	Z+11, r24	; 0x0b
 132:	94 87       	std	Z+12, r25	; 0x0c
 134:	a5 87       	std	Z+13, r26	; 0x0d
 136:	b6 87       	std	Z+14, r27	; 0x0e
	my_uart.bit_de_parada = UART_1_BIT_PARADA;
 138:	12 86       	std	Z+10, r1	; 0x0a
	my_uart.habilitar_rx = UART_ENABLE_RX0;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	84 83       	std	Z+4, r24	; 0x04
	my_uart.habilitar_tx = UART_ENABLE_TX0;
 13e:	85 83       	std	Z+5, r24	; 0x05
	my_uart.interrupcion_rx = UART_ENABLE_INTERRUPT_RXC0;
 140:	82 83       	std	Z+2, r24	; 0x02
	my_uart.interrupcion_tx = UART_DISABLE_INTERRUPT_RXC0;
 142:	13 82       	std	Z+3, r1	; 0x03
	my_uart.longitud_caracter = UART_CHARACTER_SIZE_8B;
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	86 83       	std	Z+6, r24	; 0x06
	my_uart.modo_funcionamiento = UART_MODO_ASINCRONO;
 148:	10 86       	std	Z+8, r1	; 0x08
	my_uart.multiprocesador_mode = UART_MULTI_PROCESOR_DISABLE;
 14a:	11 82       	std	Z+1, r1	; 0x01
	my_uart.noveno_bit_tx = NINTH_BIT_UART_LOW;
 14c:	17 82       	std	Z+7, r1	; 0x07
	my_uart.paridad = UART_PARIDAD_ACTIVADA_EVEN;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	81 87       	std	Z+9, r24	; 0x09
	my_uart.velocidad_doble_normal = UART_NORMAL_SPEED;
 152:	10 82       	st	Z, r1
	
	UART0_Init(&my_uart);
 154:	cf 01       	movw	r24, r30
 156:	90 c0       	rjmp	.+288    	; 0x278 <UART0_Init>
 158:	08 95       	ret

0000015a <Init_pines>:
}

void Init_pines (void)
{
	DDR_MATRIX &= ~MASK_MATRIX; // Pines de la matriz de pulsdores como entradas
 15a:	81 b1       	in	r24, 0x01	; 1
 15c:	8f 7e       	andi	r24, 0xEF	; 239
 15e:	81 b9       	out	0x01, r24	; 1
	DDR_LEDS |= MASK_LEDS; // Pines leds como salidas
 160:	87 b1       	in	r24, 0x07	; 7
 162:	8f 60       	ori	r24, 0x0F	; 15
 164:	87 b9       	out	0x07, r24	; 7
	DDR_BUZZER |= (1 << BUZZER); // Pin buzzer como salida
 166:	87 b1       	in	r24, 0x07	; 7
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	87 b9       	out	0x07, r24	; 7
	DDR_MOTOR_LOCK |= (1 << MOTOR); // Pin motor como salida
 16c:	87 b1       	in	r24, 0x07	; 7
 16e:	80 62       	ori	r24, 0x20	; 32
 170:	87 b9       	out	0x07, r24	; 7
 172:	08 95       	ret

00000174 <main>:
/* Principal */

int main(void)
{
	/* Replace with your application code */
	UART_Init_Local(); // Iniciamos el UART
 174:	d7 df       	rcall	.-82     	; 0x124 <UART_Init_Local>
	Init_pines(); // Iniciamos los pines del Atmega2560
 176:	f1 df       	rcall	.-30     	; 0x15a <Init_pines>
 178:	88 e3       	ldi	r24, 0x38	; 56
	UART0_Escribir_Cadena(mensaje_inicial);
 17a:	92 e0       	ldi	r25, 0x02	; 2
 17c:	88 d1       	rcall	.+784    	; 0x48e <UART0_Escribir_Cadena>
 17e:	16 c0       	rjmp	.+44     	; 0x1ac <main+0x38>
 180:	04 9b       	sbis	0x00, 4	; 0
	while (1)
	{
		while (clave_index < 4)
		{
			if(PIN_MATRIX & (1 << MATRIX_DE))
 182:	14 c0       	rjmp	.+40     	; 0x1ac <main+0x38>
 184:	04 99       	sbic	0x00, 4	; 0
			{
				while((PIN_MATRIX & (1 << MATRIX_DE)));
 186:	fe cf       	rjmp	.-4      	; 0x184 <main+0x10>
 188:	c0 b1       	in	r28, 0x00	; 0
				uint8_t data_from_matrix = PIN_MATRIX & 0x0F;
 18a:	cf 70       	andi	r28, 0x0F	; 15
 18c:	d0 e0       	ldi	r29, 0x00	; 0
				UART0_Escribir_Byte(datos_decode_matrix[data_from_matrix]);
 18e:	c4 5b       	subi	r28, 0xB4	; 180
 190:	dd 4f       	sbci	r29, 0xFD	; 253
 192:	88 81       	ld	r24, Y
 194:	75 d1       	rcall	.+746    	; 0x480 <UART0_Escribir_Byte>
 196:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <clave_index>
				clave_user[clave_index] = datos_decode_matrix[data_from_matrix];
 19a:	e8 2f       	mov	r30, r24
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	98 81       	ld	r25, Y
 1a0:	e6 58       	subi	r30, 0x86	; 134
 1a2:	fd 4f       	sbci	r31, 0xFD	; 253
 1a4:	90 83       	st	Z, r25
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
				clave_index++;
 1a8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <clave_index>
 1ac:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <clave_index>
	UART_Init_Local(); // Iniciamos el UART
	Init_pines(); // Iniciamos los pines del Atmega2560
	UART0_Escribir_Cadena(mensaje_inicial);
	while (1)
	{
		while (clave_index < 4)
 1b0:	84 30       	cpi	r24, 0x04	; 4
 1b2:	30 f3       	brcs	.-52     	; 0x180 <main+0xc>
				UART0_Escribir_Byte(datos_decode_matrix[data_from_matrix]);
				clave_user[clave_index] = datos_decode_matrix[data_from_matrix];
				clave_index++;
			}
		}
		UART0_Escribir_Byte('\r');
 1b4:	8d e0       	ldi	r24, 0x0D	; 13
 1b6:	64 d1       	rcall	.+712    	; 0x480 <UART0_Escribir_Byte>
		clave_index = 0;
 1b8:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <clave_index>
		UART0_Escribir_Cadena(mensaje_clave_in);
 1bc:	87 e2       	ldi	r24, 0x27	; 39
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	66 d1       	rcall	.+716    	; 0x48e <UART0_Escribir_Cadena>
 1c2:	20 e0       	ldi	r18, 0x00	; 0
		uint8_t equality_counter = 0;
		for (uint8_t i = 0 ; i < 4 ; i++)
 1c4:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		UART0_Escribir_Byte('\r');
		clave_index = 0;
		UART0_Escribir_Cadena(mensaje_clave_in);
		uint8_t equality_counter = 0;
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4 <main+0x70>
		for (uint8_t i = 0 ; i < 4 ; i++)
 1c8:	82 2f       	mov	r24, r18
		{
			if (clave_user[i] == clave_save[i])
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	e6 58       	subi	r30, 0x86	; 134
 1d0:	fd 4f       	sbci	r31, 0xFD	; 253
 1d2:	30 81       	ld	r19, Z
 1d4:	fc 01       	movw	r30, r24
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 81       	ld	r24, Z
 1dc:	38 13       	cpse	r19, r24
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <main+0x6e>
 1e0:	4f 5f       	subi	r20, 0xFF	; 255
			{
				equality_counter++;
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
		}
		UART0_Escribir_Byte('\r');
		clave_index = 0;
		UART0_Escribir_Cadena(mensaje_clave_in);
		uint8_t equality_counter = 0;
		for (uint8_t i = 0 ; i < 4 ; i++)
 1e4:	24 30       	cpi	r18, 0x04	; 4
 1e6:	80 f3       	brcs	.-32     	; 0x1c8 <main+0x54>
			if (clave_user[i] == clave_save[i])
			{
				equality_counter++;
			}
		}
		if (equality_counter == 4)
 1e8:	44 30       	cpi	r20, 0x04	; 4
 1ea:	c1 f4       	brne	.+48     	; 0x21c <main+0xa8>
		{
			UART0_Escribir_Cadena(mensaje_clave_ok);
 1ec:	87 e1       	ldi	r24, 0x17	; 23
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	4e d1       	rcall	.+668    	; 0x48e <UART0_Escribir_Cadena>
 1f2:	88 b1       	in	r24, 0x08	; 8
			MOTOR_ENABLE();
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	88 b9       	out	0x08, r24	; 8
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8b e7       	ldi	r24, 0x7B	; 123
 1fc:	92 e9       	ldi	r25, 0x92	; 146
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x8a>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x94>
 208:	00 00       	nop
 20a:	88 b1       	in	r24, 0x08	; 8
			_delay_ms(3000);
			MOTOR_DISABLE();
 20c:	8f 7d       	andi	r24, 0xDF	; 223
 20e:	88 b9       	out	0x08, r24	; 8
 210:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__data_end>
			intentos = 0;
			PORT_LEDS &= ~(MASK_LEDS);
 214:	88 b1       	in	r24, 0x08	; 8
 216:	80 7f       	andi	r24, 0xF0	; 240
 218:	88 b9       	out	0x08, r24	; 8
 21a:	14 c0       	rjmp	.+40     	; 0x244 <main+0xd0>
		} 
		else
		{
			UART0_Escribir_Cadena(mensaje_clave_nok);
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	36 d1       	rcall	.+620    	; 0x48e <UART0_Escribir_Cadena>
 222:	28 b1       	in	r18, 0x08	; 8
			PORT_LEDS |= (1 << intentos);
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	00 90 78 02 	lds	r0, 0x0278	; 0x800278 <__data_end>
 22c:	02 c0       	rjmp	.+4      	; 0x232 <main+0xbe>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <main+0xba>
 236:	82 2b       	or	r24, r18
 238:	88 b9       	out	0x08, r24	; 8
 23a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
			intentos++;
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__data_end>
		}
		equality_counter = 0;
		if (intentos == 4)
 244:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
 248:	84 30       	cpi	r24, 0x04	; 4
 24a:	09 f0       	breq	.+2      	; 0x24e <main+0xda>
 24c:	af cf       	rjmp	.-162    	; 0x1ac <main+0x38>
		{
			UART0_Escribir_Cadena("Supero numero de intentos\r");
 24e:	8c e5       	ldi	r24, 0x5C	; 92
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	1d d1       	rcall	.+570    	; 0x48e <UART0_Escribir_Cadena>
 254:	98 b1       	in	r25, 0x08	; 8
			while (1)
			{
				BUZZER_TOGGLE();
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	89 27       	eor	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
 25c:	98 b1       	in	r25, 0x08	; 8
				PORT_LEDS ^= (1 << LED_1) | (1 << LED_2) | (1 << LED_3) | (1 << LED_4);
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	89 27       	eor	r24, r25
 262:	88 b9       	out	0x08, r24	; 8
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	89 e6       	ldi	r24, 0x69	; 105
 268:	98 e1       	ldi	r25, 0x18	; 24
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0xf6>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x100>
 274:	00 00       	nop
 276:	ee cf       	rjmp	.-36     	; 0x254 <main+0xe0>

00000278 <UART0_Init>:
 278:	cf 92       	push	r12
	} 
	else
	{
		return 0;
	}
}
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
 28a:	8d b1       	in	r24, 0x0d	; 13
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	8d b9       	out	0x0d, r24	; 13
 290:	8d b1       	in	r24, 0x0d	; 13
 292:	8e 7f       	andi	r24, 0xFE	; 254
 294:	8d b9       	out	0x0d, r24	; 13
 296:	e0 ec       	ldi	r30, 0xC0	; 192
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	10 82       	st	Z, r1
 29c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 2a0:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
 2a4:	80 81       	ld	r24, Z
 2a6:	8f 7b       	andi	r24, 0xBF	; 191
 2a8:	80 83       	st	Z, r24
 2aa:	20 81       	ld	r18, Z
 2ac:	98 81       	ld	r25, Y
 2ae:	89 2f       	mov	r24, r25
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	82 2b       	or	r24, r18
 2b8:	80 83       	st	Z, r24
 2ba:	90 81       	ld	r25, Z
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	89 2b       	or	r24, r25
 2c0:	80 83       	st	Z, r24
 2c2:	80 81       	ld	r24, Z
 2c4:	81 ff       	sbrs	r24, 1
 2c6:	1e c0       	rjmp	.+60     	; 0x304 <UART0_Init+0x8c>
 2c8:	8b 85       	ldd	r24, Y+11	; 0x0b
 2ca:	9c 85       	ldd	r25, Y+12	; 0x0c
 2cc:	ad 85       	ldd	r26, Y+13	; 0x0d
 2ce:	be 85       	ldd	r27, Y+14	; 0x0e
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	aa 1f       	adc	r26, r26
 2de:	bb 1f       	adc	r27, r27
 2e0:	9c 01       	movw	r18, r24
 2e2:	ad 01       	movw	r20, r26
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	44 1f       	adc	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	74 e2       	ldi	r23, 0x24	; 36
 2f0:	84 ef       	ldi	r24, 0xF4	; 244
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	e1 d0       	rcall	.+450    	; 0x4b8 <__udivmodsi4>
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	31 09       	sbc	r19, r1
 2fa:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 2fe:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 302:	21 c0       	rjmp	.+66     	; 0x346 <UART0_Init+0xce>
 304:	8b 85       	ldd	r24, Y+11	; 0x0b
 306:	9c 85       	ldd	r25, Y+12	; 0x0c
 308:	ad 85       	ldd	r26, Y+13	; 0x0d
 30a:	be 85       	ldd	r27, Y+14	; 0x0e
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	aa 1f       	adc	r26, r26
 312:	bb 1f       	adc	r27, r27
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	aa 1f       	adc	r26, r26
 31a:	bb 1f       	adc	r27, r27
 31c:	9c 01       	movw	r18, r24
 31e:	ad 01       	movw	r20, r26
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	44 1f       	adc	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	44 1f       	adc	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	74 e2       	ldi	r23, 0x24	; 36
 334:	84 ef       	ldi	r24, 0xF4	; 244
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	bf d0       	rcall	.+382    	; 0x4b8 <__udivmodsi4>
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	31 09       	sbc	r19, r1
 33e:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 342:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 346:	e1 ec       	ldi	r30, 0xC1	; 193
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	20 81       	ld	r18, Z
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	30 e8       	ldi	r19, 0x80	; 128
 350:	83 9f       	mul	r24, r19
 352:	a0 01       	movw	r20, r0
 354:	11 24       	eor	r1, r1
 356:	9d 81       	ldd	r25, Y+5	; 0x05
 358:	30 e4       	ldi	r19, 0x40	; 64
 35a:	93 9f       	mul	r25, r19
 35c:	c0 01       	movw	r24, r0
 35e:	11 24       	eor	r1, r1
 360:	9f 81       	ldd	r25, Y+7	; 0x07
 362:	84 2b       	or	r24, r20
 364:	89 2b       	or	r24, r25
 366:	82 2b       	or	r24, r18
 368:	80 83       	st	Z, r24
 36a:	20 81       	ld	r18, Z
 36c:	8c 81       	ldd	r24, Y+4	; 0x04
 36e:	90 e1       	ldi	r25, 0x10	; 16
 370:	89 9f       	mul	r24, r25
 372:	a0 01       	movw	r20, r0
 374:	11 24       	eor	r1, r1
 376:	9d 81       	ldd	r25, Y+5	; 0x05
 378:	89 2f       	mov	r24, r25
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	84 2b       	or	r24, r20
 38a:	82 2b       	or	r24, r18
 38c:	80 83       	st	Z, r24
 38e:	2e 81       	ldd	r18, Y+6	; 0x06
 390:	82 2f       	mov	r24, r18
 392:	84 70       	andi	r24, 0x04	; 4
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	95 95       	asr	r25
 39c:	87 95       	ror	r24
 39e:	30 81       	ld	r19, Z
 3a0:	99 27       	eor	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	83 2b       	or	r24, r19
 3ac:	80 83       	st	Z, r24
 3ae:	38 85       	ldd	r19, Y+8	; 0x08
 3b0:	40 81       	ld	r20, Z
 3b2:	93 2f       	mov	r25, r19
 3b4:	92 70       	andi	r25, 0x02	; 2
 3b6:	89 2f       	mov	r24, r25
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	95 95       	asr	r25
 3bc:	87 95       	ror	r24
 3be:	96 95       	lsr	r25
 3c0:	98 2f       	mov	r25, r24
 3c2:	88 27       	eor	r24, r24
 3c4:	97 95       	ror	r25
 3c6:	87 95       	ror	r24
 3c8:	84 2b       	or	r24, r20
 3ca:	80 83       	st	Z, r24
 3cc:	80 81       	ld	r24, Z
 3ce:	30 fb       	bst	r19, 0
 3d0:	cc 24       	eor	r12, r12
 3d2:	c0 f8       	bld	r12, 0
 3d4:	d1 2c       	mov	r13, r1
 3d6:	00 24       	eor	r0, r0
 3d8:	d6 94       	lsr	r13
 3da:	c7 94       	ror	r12
 3dc:	07 94       	ror	r0
 3de:	d6 94       	lsr	r13
 3e0:	c7 94       	ror	r12
 3e2:	07 94       	ror	r0
 3e4:	dc 2c       	mov	r13, r12
 3e6:	c0 2c       	mov	r12, r0
 3e8:	c8 2a       	or	r12, r24
 3ea:	c0 82       	st	Z, r12
 3ec:	49 85       	ldd	r20, Y+9	; 0x09
 3ee:	e2 ec       	ldi	r30, 0xC2	; 194
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	30 81       	ld	r19, Z
 3f4:	84 2f       	mov	r24, r20
 3f6:	82 70       	andi	r24, 0x02	; 2
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	82 95       	swap	r24
 404:	92 95       	swap	r25
 406:	90 7f       	andi	r25, 0xF0	; 240
 408:	98 27       	eor	r25, r24
 40a:	80 7f       	andi	r24, 0xF0	; 240
 40c:	98 27       	eor	r25, r24
 40e:	40 fb       	bst	r20, 0
 410:	ee 24       	eor	r14, r14
 412:	e0 f8       	bld	r14, 0
 414:	f1 2c       	mov	r15, r1
 416:	ee 0c       	add	r14, r14
 418:	ff 1c       	adc	r15, r15
 41a:	ee 0c       	add	r14, r14
 41c:	ff 1c       	adc	r15, r15
 41e:	ee 0c       	add	r14, r14
 420:	ff 1c       	adc	r15, r15
 422:	ee 0c       	add	r14, r14
 424:	ff 1c       	adc	r15, r15
 426:	e8 2a       	or	r14, r24
 428:	e3 2a       	or	r14, r19
 42a:	e0 82       	st	Z, r14
 42c:	30 81       	ld	r19, Z
 42e:	9a 85       	ldd	r25, Y+10	; 0x0a
 430:	89 2f       	mov	r24, r25
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	83 2b       	or	r24, r19
 442:	80 83       	st	Z, r24
 444:	30 81       	ld	r19, Z
 446:	82 2f       	mov	r24, r18
 448:	82 70       	andi	r24, 0x02	; 2
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	95 95       	asr	r25
 44e:	87 95       	ror	r24
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	02 2f       	mov	r16, r18
 45a:	01 70       	andi	r16, 0x01	; 1
 45c:	10 e0       	ldi	r17, 0x00	; 0
 45e:	00 0f       	add	r16, r16
 460:	11 1f       	adc	r17, r17
 462:	08 2b       	or	r16, r24
 464:	03 2b       	or	r16, r19
 466:	00 83       	st	Z, r16
 468:	80 81       	ld	r24, Z
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	80 83       	st	Z, r24
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	ff 90       	pop	r15
 478:	ef 90       	pop	r14
 47a:	df 90       	pop	r13
 47c:	cf 90       	pop	r12
 47e:	08 95       	ret

00000480 <UART0_Escribir_Byte>:

/* Función para escribir un dato por el terminal serial*/
void UART0_Escribir_Byte (unsigned char dato)
{
	while (!(UCSR0A & (1 << UDRE0))); // Bucle mientras el registro UDR0 esté vacio
 480:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 484:	95 ff       	sbrs	r25, 5
 486:	fc cf       	rjmp	.-8      	; 0x480 <UART0_Escribir_Byte>
	UDR0 = dato;
 488:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 48c:	08 95       	ret

0000048e <UART0_Escribir_Cadena>:
}

/* Funcion para escribir una cadena de datos */
void UART0_Escribir_Cadena (char *cadena)
{
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	8c 01       	movw	r16, r24
	uint16_t contador_item_cadena = 0;
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	d0 e0       	ldi	r29, 0x00	; 0
	while (cadena[contador_item_cadena] != '\0')
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <UART0_Escribir_Cadena+0x14>
	{
		UART0_Escribir_Byte(cadena[contador_item_cadena]);
 49e:	f0 df       	rcall	.-32     	; 0x480 <UART0_Escribir_Byte>
		contador_item_cadena++;
 4a0:	21 96       	adiw	r28, 0x01	; 1

/* Funcion para escribir una cadena de datos */
void UART0_Escribir_Cadena (char *cadena)
{
	uint16_t contador_item_cadena = 0;
	while (cadena[contador_item_cadena] != '\0')
 4a2:	f8 01       	movw	r30, r16
 4a4:	ec 0f       	add	r30, r28
 4a6:	fd 1f       	adc	r31, r29
 4a8:	80 81       	ld	r24, Z
 4aa:	81 11       	cpse	r24, r1
 4ac:	f8 cf       	rjmp	.-16     	; 0x49e <UART0_Escribir_Cadena+0x10>
	{
		UART0_Escribir_Byte(cadena[contador_item_cadena]);
		contador_item_cadena++;
	}
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	08 95       	ret

000004b8 <__udivmodsi4>:
 4b8:	a1 e2       	ldi	r26, 0x21	; 33
 4ba:	1a 2e       	mov	r1, r26
 4bc:	aa 1b       	sub	r26, r26
 4be:	bb 1b       	sub	r27, r27
 4c0:	fd 01       	movw	r30, r26
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <__udivmodsi4_ep>

000004c4 <__udivmodsi4_loop>:
 4c4:	aa 1f       	adc	r26, r26
 4c6:	bb 1f       	adc	r27, r27
 4c8:	ee 1f       	adc	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	a2 17       	cp	r26, r18
 4ce:	b3 07       	cpc	r27, r19
 4d0:	e4 07       	cpc	r30, r20
 4d2:	f5 07       	cpc	r31, r21
 4d4:	20 f0       	brcs	.+8      	; 0x4de <__udivmodsi4_ep>
 4d6:	a2 1b       	sub	r26, r18
 4d8:	b3 0b       	sbc	r27, r19
 4da:	e4 0b       	sbc	r30, r20
 4dc:	f5 0b       	sbc	r31, r21

000004de <__udivmodsi4_ep>:
 4de:	66 1f       	adc	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	88 1f       	adc	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	1a 94       	dec	r1
 4e8:	69 f7       	brne	.-38     	; 0x4c4 <__udivmodsi4_loop>
 4ea:	60 95       	com	r22
 4ec:	70 95       	com	r23
 4ee:	80 95       	com	r24
 4f0:	90 95       	com	r25
 4f2:	9b 01       	movw	r18, r22
 4f4:	ac 01       	movw	r20, r24
 4f6:	bd 01       	movw	r22, r26
 4f8:	cf 01       	movw	r24, r30
 4fa:	08 95       	ret

000004fc <_exit>:
 4fc:	f8 94       	cli

000004fe <__stop_program>:
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <__stop_program>
