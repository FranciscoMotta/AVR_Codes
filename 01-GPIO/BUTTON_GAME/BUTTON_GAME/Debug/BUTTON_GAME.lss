
BUTTON_GAME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800202  00800202  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5a  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c49  00000000  00000000  0000123e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046a  00000000  00000000  00001e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000022f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e6  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015e  00000000  00000000  0000290e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 eb       	ldi	r30, 0xB6	; 182
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	12 d0       	rcall	.+36     	; 0x144 <main>
 120:	c8 c0       	rjmp	.+400    	; 0x2b2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Init_GPIO_Players>:
/* Definición de funcione */

void Init_GPIO_Players(void)
{
	// Leds como salidas
	DDR_LEDS_J1 = 0xFF;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	84 b9       	out	0x04, r24	; 4
	DDR_LEDS_J2 = 0xFF;
 128:	87 b9       	out	0x07, r24	; 7
	
	// Botones como entrada
	DDR_BOTON_J1 &= ~MASK_BOTON_J1;
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	84 b9       	out	0x04, r24	; 4
	DDR_BOTON_J2 &= ~MASK_BOTON_J2;
 130:	87 b1       	in	r24, 0x07	; 7
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	87 b9       	out	0x07, r24	; 7
	
	// Pull-Up resistors
	PORT_BOTON_J1 |= MASK_BOTON_J1;
 136:	85 b1       	in	r24, 0x05	; 5
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	85 b9       	out	0x05, r24	; 5
	PORT_BOTON_J2 |= MASK_BOTON_J2;
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret

00000144 <main>:
/* Principal */

int main(void)
{
	/* Replace with your application code */
	Init_GPIO_Players();
 144:	ef df       	rcall	.-34     	; 0x124 <Init_GPIO_Players>
	while (1)
	{
		/* Jugador 1 */
		
		if (PIN_BOTON_J1 & MASK_BOTON_J1)
 146:	18 9b       	sbis	0x03, 0	; 3
 148:	48 c0       	rjmp	.+144    	; 0x1da <main+0x96>
		{
			boton_presionado_contador[0]++;
 14a:	e8 e0       	ldi	r30, 0x08	; 8
 14c:	f2 e0       	ldi	r31, 0x02	; 2
 14e:	80 81       	ld	r24, Z
 150:	91 81       	ldd	r25, Z+1	; 0x01
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	91 83       	std	Z+1, r25	; 0x01
 156:	80 83       	st	Z, r24
			if (boton_presionado_contador[0] > NIVEL_DE_SEGURIDAD)
 158:	85 3f       	cpi	r24, 0xF5	; 245
 15a:	91 40       	sbci	r25, 0x01	; 1
 15c:	08 f4       	brcc	.+2      	; 0x160 <main+0x1c>
 15e:	4d c0       	rjmp	.+154    	; 0x1fa <main+0xb6>
			{
				if (estado_presion[0] == false)
 160:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 164:	81 11       	cpse	r24, r1
 166:	34 c0       	rjmp	.+104    	; 0x1d0 <main+0x8c>
				{
					estado_presion[0] = true;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
					PORT_LEDS_J1 |= (1 << led_contador[0]);
 16e:	25 b1       	in	r18, 0x05	; 5
 170:	e0 e0       	ldi	r30, 0x00	; 0
 172:	f2 e0       	ldi	r31, 0x02	; 2
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	00 80       	ld	r0, Z
 17a:	02 c0       	rjmp	.+4      	; 0x180 <main+0x3c>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <main+0x38>
 184:	82 2b       	or	r24, r18
 186:	85 b9       	out	0x05, r24	; 5
					led_contador[0]++;
 188:	80 81       	ld	r24, Z
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 83       	st	Z, r24
					if (led_contador[0] > 7)
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	f8 f0       	brcs	.+62     	; 0x1d0 <main+0x8c>
					{
						led_contador[0] = 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 83       	st	Z, r24
						PORT_LEDS_J2 = 0x01;
 196:	88 b9       	out	0x08, r24	; 8
						led_contador[1] = 1;
 198:	81 83       	std	Z+1, r24	; 0x01
						uint8_t contador = 0;
 19a:	80 e0       	ldi	r24, 0x00	; 0
						while (contador < REPETICIONES)
 19c:	17 c0       	rjmp	.+46     	; 0x1cc <main+0x88>
						{
							PORT_LEDS_J1 = 0xFF;
 19e:	9f ef       	ldi	r25, 0xFF	; 255
 1a0:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	3f ef       	ldi	r19, 0xFF	; 255
 1a4:	91 ee       	ldi	r25, 0xE1	; 225
 1a6:	24 e0       	ldi	r18, 0x04	; 4
 1a8:	31 50       	subi	r19, 0x01	; 1
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x64>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x6e>
 1b2:	00 00       	nop
							_delay_ms(100);
							PORT_LEDS_J1 = 0x01;
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	95 b9       	out	0x05, r25	; 5
 1b8:	3f ef       	ldi	r19, 0xFF	; 255
 1ba:	91 ee       	ldi	r25, 0xE1	; 225
 1bc:	24 e0       	ldi	r18, 0x04	; 4
 1be:	31 50       	subi	r19, 0x01	; 1
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x7a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x84>
 1c8:	00 00       	nop
							_delay_ms(100);
							contador++;
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
					{
						led_contador[0] = 1;
						PORT_LEDS_J2 = 0x01;
						led_contador[1] = 1;
						uint8_t contador = 0;
						while (contador < REPETICIONES)
 1cc:	85 30       	cpi	r24, 0x05	; 5
 1ce:	38 f3       	brcs	.-50     	; 0x19e <main+0x5a>
							_delay_ms(100);
							contador++;
						}
					}
				}
				boton_presionado_contador[0] = 0;
 1d0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <boton_presionado_contador+0x1>
 1d4:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <boton_presionado_contador>
 1d8:	10 c0       	rjmp	.+32     	; 0x1fa <main+0xb6>
			}
		}
		else
		{
			boton_soltado_contador[0]++;
 1da:	e4 e0       	ldi	r30, 0x04	; 4
 1dc:	f2 e0       	ldi	r31, 0x02	; 2
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	80 83       	st	Z, r24
			if (boton_soltado_contador[0] > NIVEL_DE_SEGURIDAD)
 1e8:	85 3f       	cpi	r24, 0xF5	; 245
 1ea:	91 40       	sbci	r25, 0x01	; 1
 1ec:	30 f0       	brcs	.+12     	; 0x1fa <main+0xb6>
			{
				estado_presion[0] = false;
 1ee:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
				boton_soltado_contador[0] = 0;	
 1f2:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <boton_soltado_contador+0x1>
 1f6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <boton_soltado_contador>
			}
		}
		
		/* Jugador 2 */
		
		if (PIN_BOTON_J2 & MASK_BOTON_J2)
 1fa:	30 9b       	sbis	0x06, 0	; 6
 1fc:	48 c0       	rjmp	.+144    	; 0x28e <main+0x14a>
		{
			boton_presionado_contador[1]++;
 1fe:	e8 e0       	ldi	r30, 0x08	; 8
 200:	f2 e0       	ldi	r31, 0x02	; 2
 202:	82 81       	ldd	r24, Z+2	; 0x02
 204:	93 81       	ldd	r25, Z+3	; 0x03
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	93 83       	std	Z+3, r25	; 0x03
 20a:	82 83       	std	Z+2, r24	; 0x02
			if (boton_presionado_contador[1] > NIVEL_DE_SEGURIDAD)
 20c:	85 3f       	cpi	r24, 0xF5	; 245
 20e:	91 40       	sbci	r25, 0x01	; 1
 210:	08 f4       	brcc	.+2      	; 0x214 <main+0xd0>
 212:	99 cf       	rjmp	.-206    	; 0x146 <main+0x2>
			{
				if (estado_presion[1] == false)
 214:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <__data_end+0x1>
 218:	81 11       	cpse	r24, r1
 21a:	34 c0       	rjmp	.+104    	; 0x284 <main+0x140>
				{
					estado_presion[1] = true;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <__data_end+0x1>
					PORT_LEDS_J2 |= (1 << led_contador[1]);
 222:	98 b1       	in	r25, 0x08	; 8
 224:	e0 e0       	ldi	r30, 0x00	; 0
 226:	f2 e0       	ldi	r31, 0x02	; 2
 228:	81 81       	ldd	r24, Z+1	; 0x01
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	08 2e       	mov	r0, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <main+0xf2>
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <main+0xee>
 23a:	29 2b       	or	r18, r25
 23c:	28 b9       	out	0x08, r18	; 8
					led_contador[1]++;
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	81 83       	std	Z+1, r24	; 0x01
					if (led_contador[1] > 7)
 242:	88 30       	cpi	r24, 0x08	; 8
 244:	f8 f0       	brcs	.+62     	; 0x284 <main+0x140>
					{
						led_contador[1] = 1;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	81 83       	std	Z+1, r24	; 0x01
						uint8_t contador = 0;
						PORT_LEDS_J1 = 0x01;
 24a:	85 b9       	out	0x05, r24	; 5
						led_contador[0] = 1;
 24c:	80 83       	st	Z, r24
					PORT_LEDS_J2 |= (1 << led_contador[1]);
					led_contador[1]++;
					if (led_contador[1] > 7)
					{
						led_contador[1] = 1;
						uint8_t contador = 0;
 24e:	80 e0       	ldi	r24, 0x00	; 0
						PORT_LEDS_J1 = 0x01;
						led_contador[0] = 1;
						while (contador < REPETICIONES)
 250:	17 c0       	rjmp	.+46     	; 0x280 <main+0x13c>
						{
							PORT_LEDS_J2 = 0xFF;
 252:	9f ef       	ldi	r25, 0xFF	; 255
 254:	98 b9       	out	0x08, r25	; 8
 256:	3f ef       	ldi	r19, 0xFF	; 255
 258:	91 ee       	ldi	r25, 0xE1	; 225
 25a:	24 e0       	ldi	r18, 0x04	; 4
 25c:	31 50       	subi	r19, 0x01	; 1
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	20 40       	sbci	r18, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x118>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x122>
 266:	00 00       	nop
							_delay_ms(100);
							PORT_LEDS_J2 = 0x01;
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	98 b9       	out	0x08, r25	; 8
 26c:	3f ef       	ldi	r19, 0xFF	; 255
 26e:	91 ee       	ldi	r25, 0xE1	; 225
 270:	24 e0       	ldi	r18, 0x04	; 4
 272:	31 50       	subi	r19, 0x01	; 1
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	20 40       	sbci	r18, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x12e>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x138>
 27c:	00 00       	nop
							_delay_ms(100);
							contador++;
 27e:	8f 5f       	subi	r24, 0xFF	; 255
					{
						led_contador[1] = 1;
						uint8_t contador = 0;
						PORT_LEDS_J1 = 0x01;
						led_contador[0] = 1;
						while (contador < REPETICIONES)
 280:	85 30       	cpi	r24, 0x05	; 5
 282:	38 f3       	brcs	.-50     	; 0x252 <main+0x10e>
							_delay_ms(100);
							contador++;
						}
					}
				}
				boton_presionado_contador[1] = 0;	
 284:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <boton_presionado_contador+0x3>
 288:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <boton_presionado_contador+0x2>
 28c:	5c cf       	rjmp	.-328    	; 0x146 <main+0x2>
			}
		}
		else
		{
			boton_soltado_contador[1]++;
 28e:	e4 e0       	ldi	r30, 0x04	; 4
 290:	f2 e0       	ldi	r31, 0x02	; 2
 292:	82 81       	ldd	r24, Z+2	; 0x02
 294:	93 81       	ldd	r25, Z+3	; 0x03
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	93 83       	std	Z+3, r25	; 0x03
 29a:	82 83       	std	Z+2, r24	; 0x02
			if (boton_soltado_contador[1] > NIVEL_DE_SEGURIDAD)
 29c:	85 3f       	cpi	r24, 0xF5	; 245
 29e:	91 40       	sbci	r25, 0x01	; 1
 2a0:	08 f4       	brcc	.+2      	; 0x2a4 <main+0x160>
 2a2:	51 cf       	rjmp	.-350    	; 0x146 <main+0x2>
			{
				estado_presion[1] = false;
 2a4:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
				boton_soltado_contador[1] = 0;
 2a8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <boton_soltado_contador+0x3>
 2ac:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <boton_soltado_contador+0x2>
 2b0:	4a cf       	rjmp	.-364    	; 0x146 <main+0x2>

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
