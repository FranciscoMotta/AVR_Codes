
PUSH_BUTTON_LIB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800200  00800200  000002ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e9d  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c99  00000000  00000000  00001209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000432  00000000  00000000  00001ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000672  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000089  00000000  00000000  000029ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 30       	cpi	r26, 0x09	; 9
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	8a d0       	rcall	.+276    	; 0x21a <main>
 106:	96 c0       	rjmp	.+300    	; 0x234 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <Inicializacion_Boton>:
#include "FM_Push_Boton_Lib.h"

/* Librería de inicialización del boton a leer */
void Inicializacion_Boton (_boton_pin_t boton, _pull_up_state_t pullup)
{
	if (pullup)
 10a:	66 23       	and	r22, r22
 10c:	61 f0       	breq	.+24     	; 0x126 <Inicializacion_Boton+0x1c>
	{
		PORT_BOTON |= (1 << boton);
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	08 2e       	mov	r0, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <Inicializacion_Boton+0x12>
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Inicializacion_Boton+0xe>
 120:	29 2b       	or	r18, r25
 122:	25 b9       	out	0x05, r18	; 5
 124:	0c c0       	rjmp	.+24     	; 0x13e <Inicializacion_Boton+0x34>
	}
	else
	{
		PORT_BOTON &= ~(1 << boton);
 126:	95 b1       	in	r25, 0x05	; 5
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	08 2e       	mov	r0, r24
 12e:	02 c0       	rjmp	.+4      	; 0x134 <Inicializacion_Boton+0x2a>
 130:	22 0f       	add	r18, r18
 132:	33 1f       	adc	r19, r19
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <Inicializacion_Boton+0x26>
 138:	20 95       	com	r18
 13a:	29 23       	and	r18, r25
 13c:	25 b9       	out	0x05, r18	; 5
	}
	DDR_BOTON &= ~(1 << boton); // Boton como salida
 13e:	44 b1       	in	r20, 0x04	; 4
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	b9 01       	movw	r22, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <Inicializacion_Boton+0x42>
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <Inicializacion_Boton+0x3e>
 150:	cb 01       	movw	r24, r22
 152:	80 95       	com	r24
 154:	84 23       	and	r24, r20
 156:	84 b9       	out	0x04, r24	; 4
 158:	08 95       	ret

0000015a <Leer_Boton_Sin_Rebote_Simple>:
uint32_t contador_boton_soltado = 0;
bool estado_boton = false;

bool Leer_Boton_Sin_Rebote_Simple (_boton_pin_t boton)
{
	char mascara_boton = (1 << boton);
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <Leer_Boton_Sin_Rebote_Simple+0xa>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <Leer_Boton_Sin_Rebote_Simple+0x6>
	if (PIN_BOTON & mascara_boton)
 168:	83 b1       	in	r24, 0x03	; 3
 16a:	28 23       	and	r18, r24
 16c:	51 f1       	breq	.+84     	; 0x1c2 <Leer_Boton_Sin_Rebote_Simple+0x68>
	{
		contador_boton_presionado++;
 16e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <contador_boton_presionado>
 172:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <contador_boton_presionado+0x1>
 176:	a0 91 07 02 	lds	r26, 0x0207	; 0x800207 <contador_boton_presionado+0x2>
 17a:	b0 91 08 02 	lds	r27, 0x0208	; 0x800208 <contador_boton_presionado+0x3>
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	a1 1d       	adc	r26, r1
 182:	b1 1d       	adc	r27, r1
 184:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <contador_boton_presionado>
 188:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <contador_boton_presionado+0x1>
 18c:	a0 93 07 02 	sts	0x0207, r26	; 0x800207 <contador_boton_presionado+0x2>
 190:	b0 93 08 02 	sts	0x0208, r27	; 0x800208 <contador_boton_presionado+0x3>
		if (contador_boton_presionado > NIVEL_DE_SEGURIDAD)
 194:	85 3f       	cpi	r24, 0xF5	; 245
 196:	91 40       	sbci	r25, 0x01	; 1
 198:	a1 05       	cpc	r26, r1
 19a:	b1 05       	cpc	r27, r1
 19c:	b0 f1       	brcs	.+108    	; 0x20a <Leer_Boton_Sin_Rebote_Simple+0xb0>
		{
			if(estado_boton == false)
 19e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1a2:	81 11       	cpse	r24, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <Leer_Boton_Sin_Rebote_Simple+0x54>
			{
				estado_boton = true;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
				return 1;
 1ac:	08 95       	ret
			}
			contador_boton_presionado = 0;
 1ae:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <contador_boton_presionado>
 1b2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <contador_boton_presionado+0x1>
 1b6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <contador_boton_presionado+0x2>
 1ba:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <contador_boton_presionado+0x3>
		{
			estado_boton = false;
			contador_boton_soltado = 0;
		}
	}
	return 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
			contador_boton_presionado = 0;
		}
	}
	else 
	{
		contador_boton_soltado++;
 1c2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <contador_boton_soltado>
 1c6:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <contador_boton_soltado+0x1>
 1ca:	a0 91 03 02 	lds	r26, 0x0203	; 0x800203 <contador_boton_soltado+0x2>
 1ce:	b0 91 04 02 	lds	r27, 0x0204	; 0x800204 <contador_boton_soltado+0x3>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	a1 1d       	adc	r26, r1
 1d6:	b1 1d       	adc	r27, r1
 1d8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <contador_boton_soltado>
 1dc:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <contador_boton_soltado+0x1>
 1e0:	a0 93 03 02 	sts	0x0203, r26	; 0x800203 <contador_boton_soltado+0x2>
 1e4:	b0 93 04 02 	sts	0x0204, r27	; 0x800204 <contador_boton_soltado+0x3>
		if (contador_boton_soltado > NIVEL_DE_SEGURIDAD)
 1e8:	85 3f       	cpi	r24, 0xF5	; 245
 1ea:	91 40       	sbci	r25, 0x01	; 1
 1ec:	a1 05       	cpc	r26, r1
 1ee:	b1 05       	cpc	r27, r1
 1f0:	70 f0       	brcs	.+28     	; 0x20e <Leer_Boton_Sin_Rebote_Simple+0xb4>
		{
			estado_boton = false;
 1f2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
			contador_boton_soltado = 0;
 1f6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <contador_boton_soltado>
 1fa:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <contador_boton_soltado+0x1>
 1fe:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <contador_boton_soltado+0x2>
 202:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <contador_boton_soltado+0x3>
		}
	}
	return 0;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret

00000212 <Inicializacion_Led>:

/* Definición de funcione */

void Inicializacion_Led (void)
{
	DDR_LED |= MASK_LED;
 212:	8a b1       	in	r24, 0x0a	; 10
 214:	88 60       	ori	r24, 0x08	; 8
 216:	8a b9       	out	0x0a, r24	; 10
 218:	08 95       	ret

0000021a <main>:
/* Principal */

int main(void)
{
	/* Replace with your application code */
	Inicializacion_Led(); // Led como salida
 21a:	fb df       	rcall	.-10     	; 0x212 <Inicializacion_Led>
	Inicializacion_Boton(BOTON_1, PULL_UP_DISABLE); // Boton 1 sin pullup
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	74 df       	rcall	.-280    	; 0x10a <Inicializacion_Boton>
	while (1)
	{
		if (Leer_Boton_Sin_Rebote_Simple(BOTON_1))
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	9a df       	rcall	.-204    	; 0x15a <Leer_Boton_Sin_Rebote_Simple>
 226:	88 23       	and	r24, r24
 228:	e1 f3       	breq	.-8      	; 0x222 <main+0x8>
 22a:	9b b1       	in	r25, 0x0b	; 11
		{
			LED_TOGGLE();
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	89 27       	eor	r24, r25
 230:	8b b9       	out	0x0b, r24	; 11
 232:	f7 cf       	rjmp	.-18     	; 0x222 <main+0x8>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
