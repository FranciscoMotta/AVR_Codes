
USART_CONF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00000464  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000464  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001470  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d59  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000548  00000000  00000000  000027a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00002cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa9  00000000  00000000  00002dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fb  00000000  00000000  0000386d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 33       	cpi	r26, 0x34	; 52
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	2e d0       	rcall	.+92     	; 0x16c <main>
 110:	a7 c1       	rjmp	.+846    	; 0x460 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <UART_Initialice>:
}

/* Definición de funciones */

void UART_Initialice (void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	2f 97       	sbiw	r28, 0x0f	; 15
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	_my_uart_0_config_t my_uart;
	my_uart.baudios = BAUDRATE_9600;
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	95 e2       	ldi	r25, 0x25	; 37
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	8c 87       	std	Y+12, r24	; 0x0c
 132:	9d 87       	std	Y+13, r25	; 0x0d
 134:	ae 87       	std	Y+14, r26	; 0x0e
 136:	bf 87       	std	Y+15, r27	; 0x0f
	my_uart.bit_de_parada = UART_1_BIT_PARADA;
 138:	1b 86       	std	Y+11, r1	; 0x0b
	my_uart.habilitar_rx = UART_ENABLE_RX0;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	8d 83       	std	Y+5, r24	; 0x05
	my_uart.habilitar_tx = UART_ENABLE_TX0;
 13e:	8e 83       	std	Y+6, r24	; 0x06
	my_uart.interrupcion_rx = UART_ENABLE_INTERRUPT_RXC0;
 140:	8b 83       	std	Y+3, r24	; 0x03
	my_uart.interrupcion_tx = UART_DISABLE_INTERRUPT_RXC0;
 142:	1c 82       	std	Y+4, r1	; 0x04
	my_uart.longitud_caracter = UART_CHARACTER_SIZE_8B;
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	8f 83       	std	Y+7, r24	; 0x07
	my_uart.modo_funcionamiento = UART_MODO_ASINCRONO;
 148:	19 86       	std	Y+9, r1	; 0x09
	my_uart.multiprocesador_mode = UART_MULTI_PROCESOR_DISABLE;
 14a:	1a 82       	std	Y+2, r1	; 0x02
	my_uart.noveno_bit_tx = NINTH_BIT_UART_LOW;
 14c:	18 86       	std	Y+8, r1	; 0x08
	my_uart.paridad = UART_PARIDAD_ACTIVADA_EVEN;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	8a 87       	std	Y+10, r24	; 0x0a
	my_uart.velocidad_doble_normal = UART_NORMAL_SPEED;
 152:	19 82       	std	Y+1, r1	; 0x01
	
	UART0_Init(&my_uart);
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	38 d0       	rcall	.+112    	; 0x1ca <UART0_Init>
 15a:	2f 96       	adiw	r28, 0x0f	; 15
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <main>:
/* Principal */

int main(void)
{
	/* Replace with your application code */
	DDR_LEDS |= MASK_LEDS; // Leds como salidas
 16c:	84 b1       	in	r24, 0x04	; 4
 16e:	87 60       	ori	r24, 0x07	; 7
 170:	84 b9       	out	0x04, r24	; 4
	PORT_LEDS &= ~MASK_LEDS; // Leds apagados
 172:	85 b1       	in	r24, 0x05	; 5
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	85 b9       	out	0x05, r24	; 5
	UART_Initialice(); // Iniciamos el UART
 178:	cd df       	rcall	.-102    	; 0x114 <UART_Initialice>
	UART0_Escribir_Cadena("Hola\n\r");
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	92 e0       	ldi	r25, 0x02	; 2
	while (1)
	{
		uint8_t dato_uart = UART0_Leer_Byte();
 17e:	39 d1       	rcall	.+626    	; 0x3f2 <UART0_Escribir_Cadena>
 180:	28 d1       	rcall	.+592    	; 0x3d2 <UART0_Leer_Byte>
		if (dato_uart != '\0')
 182:	88 23       	and	r24, r24
 184:	e9 f3       	breq	.-6      	; 0x180 <main+0x14>
		{
			switch (dato_uart)
 186:	82 33       	cpi	r24, 0x32	; 50
 188:	59 f0       	breq	.+22     	; 0x1a0 <main+0x34>
 18a:	83 33       	cpi	r24, 0x33	; 51
 18c:	81 f0       	breq	.+32     	; 0x1ae <main+0x42>
 18e:	81 33       	cpi	r24, 0x31	; 49
 190:	a9 f4       	brne	.+42     	; 0x1bc <main+0x50>
			{
				case '1':
				PORT_LEDS |= (MASK_LED1);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	81 60       	ori	r24, 0x01	; 1
				UART0_Escribir_Cadena("Led 1 ON\n\r");
 196:	85 b9       	out	0x05, r24	; 5
 198:	87 e0       	ldi	r24, 0x07	; 7
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	2a d1       	rcall	.+596    	; 0x3f2 <UART0_Escribir_Cadena>
				break;
 19e:	f0 cf       	rjmp	.-32     	; 0x180 <main+0x14>
				case '2':
				PORT_LEDS |= (MASK_LED2);
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	82 60       	ori	r24, 0x02	; 2
				UART0_Escribir_Cadena("Led 2 ON\n\r");
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	82 e1       	ldi	r24, 0x12	; 18
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	23 d1       	rcall	.+582    	; 0x3f2 <UART0_Escribir_Cadena>
				break;
 1ac:	e9 cf       	rjmp	.-46     	; 0x180 <main+0x14>
				case '3':
				PORT_LEDS |= (MASK_LED3);
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	84 60       	ori	r24, 0x04	; 4
				UART0_Escribir_Cadena("Led 3 ON\n\r");
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	8d e1       	ldi	r24, 0x1D	; 29
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	1c d1       	rcall	.+568    	; 0x3f2 <UART0_Escribir_Cadena>
				break;
				default:
				PORT_LEDS &= ~(MASK_LEDS);
 1ba:	e2 cf       	rjmp	.-60     	; 0x180 <main+0x14>
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	88 7f       	andi	r24, 0xF8	; 248
				UART0_Escribir_Cadena("Leds OFF\n\r");
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	88 e2       	ldi	r24, 0x28	; 40
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	15 d1       	rcall	.+554    	; 0x3f2 <UART0_Escribir_Cadena>
				break;
 1c8:	db cf       	rjmp	.-74     	; 0x180 <main+0x14>

000001ca <UART0_Init>:
 */ 

#include <FM_USART.h>

void UART0_Init (_my_uart_0_config_t *uart_params)
{
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	ec 01       	movw	r28, r24
	/* Configuración de pines */
	
	UART0_DDR |= (1 << TX0_PIN);
 1dc:	8d b1       	in	r24, 0x0d	; 13
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	8d b9       	out	0x0d, r24	; 13
	UART0_DDR &= ~(1 << RX0_PIN);
 1e2:	8d b1       	in	r24, 0x0d	; 13
 1e4:	8e 7f       	andi	r24, 0xFE	; 254
 1e6:	8d b9       	out	0x0d, r24	; 13
	
	/* Inicializacion de los regitros de trabajo */
	
	UCSR0A = 0;
 1e8:	e0 ec       	ldi	r30, 0xC0	; 192
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	10 82       	st	Z, r1
	UCSR0B = 0;
 1ee:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = 0;
 1f2:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	
	/* Configuracion */
	
	// Registro UCSR0A
	
	UCSR0A &= ~(1 << TXC0);
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 7b       	andi	r24, 0xBF	; 191
 1fa:	80 83       	st	Z, r24
	UCSR0A |= (uart_params->velocidad_doble_normal << U2X0);
 1fc:	20 81       	ld	r18, Z
 1fe:	98 81       	ld	r25, Y
 200:	89 2f       	mov	r24, r25
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	82 2b       	or	r24, r18
 20a:	80 83       	st	Z, r24
	UCSR0A |= (uart_params->multiprocesador_mode << MPCM0);
 20c:	90 81       	ld	r25, Z
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	89 2b       	or	r24, r25
 212:	80 83       	st	Z, r24
	if (UCSR0A & (1 << U2X0))
 214:	80 81       	ld	r24, Z
 216:	81 ff       	sbrs	r24, 1
 218:	1e c0       	rjmp	.+60     	; 0x256 <UART0_Init+0x8c>
	{
		UBRR0 = (F_CPU / (8 * uart_params->baudios)) - 1;
 21a:	8b 85       	ldd	r24, Y+11	; 0x0b
 21c:	9c 85       	ldd	r25, Y+12	; 0x0c
 21e:	ad 85       	ldd	r26, Y+13	; 0x0d
 220:	be 85       	ldd	r27, Y+14	; 0x0e
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	aa 1f       	adc	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	9c 01       	movw	r18, r24
 234:	ad 01       	movw	r20, r26
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	44 1f       	adc	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	74 e2       	ldi	r23, 0x24	; 36
 242:	84 ef       	ldi	r24, 0xF4	; 244
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	ea d0       	rcall	.+468    	; 0x41c <__udivmodsi4>
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	31 09       	sbc	r19, r1
 24c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 250:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 254:	21 c0       	rjmp	.+66     	; 0x298 <UART0_Init+0xce>
	} 
	else
	{
		UBRR0 = (F_CPU / (16 * uart_params->baudios)) - 1;
 256:	8b 85       	ldd	r24, Y+11	; 0x0b
 258:	9c 85       	ldd	r25, Y+12	; 0x0c
 25a:	ad 85       	ldd	r26, Y+13	; 0x0d
 25c:	be 85       	ldd	r27, Y+14	; 0x0e
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	aa 1f       	adc	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	9c 01       	movw	r18, r24
 270:	ad 01       	movw	r20, r26
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	44 1f       	adc	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	22 0f       	add	r18, r18
 27c:	33 1f       	adc	r19, r19
 27e:	44 1f       	adc	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	74 e2       	ldi	r23, 0x24	; 36
 286:	84 ef       	ldi	r24, 0xF4	; 244
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	c8 d0       	rcall	.+400    	; 0x41c <__udivmodsi4>
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	31 09       	sbc	r19, r1
 290:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 294:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	}
	
	// Registro UCSR0B
	
	UCSR0B |= (uart_params->interrupcion_rx << RXCIE0) | (uart_params->habilitar_tx << TXCIE0) | (uart_params->noveno_bit_tx << TXB80);
 298:	e1 ec       	ldi	r30, 0xC1	; 193
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	20 81       	ld	r18, Z
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	30 e8       	ldi	r19, 0x80	; 128
 2a2:	83 9f       	mul	r24, r19
 2a4:	a0 01       	movw	r20, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	9d 81       	ldd	r25, Y+5	; 0x05
 2aa:	30 e4       	ldi	r19, 0x40	; 64
 2ac:	93 9f       	mul	r25, r19
 2ae:	c0 01       	movw	r24, r0
 2b0:	11 24       	eor	r1, r1
 2b2:	9f 81       	ldd	r25, Y+7	; 0x07
 2b4:	84 2b       	or	r24, r20
 2b6:	89 2b       	or	r24, r25
 2b8:	82 2b       	or	r24, r18
 2ba:	80 83       	st	Z, r24
	UCSR0B |= (uart_params->habilitar_rx << RXEN0) | (uart_params->habilitar_tx << TXEN0);
 2bc:	20 81       	ld	r18, Z
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	90 e1       	ldi	r25, 0x10	; 16
 2c2:	89 9f       	mul	r24, r25
 2c4:	a0 01       	movw	r20, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ca:	89 2f       	mov	r24, r25
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	84 2b       	or	r24, r20
 2dc:	82 2b       	or	r24, r18
 2de:	80 83       	st	Z, r24
	
	uint8_t long_caracter = uart_params->longitud_caracter;
 2e0:	2e 81       	ldd	r18, Y+6	; 0x06
	uint8_t primer_bit_long = (long_caracter & 0x04) >> UCSZ02;
 2e2:	82 2f       	mov	r24, r18
 2e4:	84 70       	andi	r24, 0x04	; 4
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	95 95       	asr	r25
 2ea:	87 95       	ror	r24
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
	
	UCSR0B |= (primer_bit_long << UCSZ02);
 2f0:	30 81       	ld	r19, Z
 2f2:	99 27       	eor	r25, r25
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	83 2b       	or	r24, r19
 2fe:	80 83       	st	Z, r24
	
	// Registro UCSR0C
	
	uint8_t umsel_bits = (uart_params->modo_funcionamiento) & 0x03;
 300:	38 85       	ldd	r19, Y+8	; 0x08
	UCSR0B |= ((umsel_bits & 0x02) >> 1) << UMSEL01;
 302:	40 81       	ld	r20, Z
 304:	93 2f       	mov	r25, r19
 306:	92 70       	andi	r25, 0x02	; 2
 308:	89 2f       	mov	r24, r25
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	95 95       	asr	r25
 30e:	87 95       	ror	r24
 310:	96 95       	lsr	r25
 312:	98 2f       	mov	r25, r24
 314:	88 27       	eor	r24, r24
 316:	97 95       	ror	r25
 318:	87 95       	ror	r24
 31a:	84 2b       	or	r24, r20
 31c:	80 83       	st	Z, r24
	UCSR0B |= ((umsel_bits & 0x01)) << UMSEL00;
 31e:	80 81       	ld	r24, Z
 320:	30 fb       	bst	r19, 0
 322:	cc 24       	eor	r12, r12
 324:	c0 f8       	bld	r12, 0
 326:	d1 2c       	mov	r13, r1
 328:	00 24       	eor	r0, r0
 32a:	d6 94       	lsr	r13
 32c:	c7 94       	ror	r12
 32e:	07 94       	ror	r0
 330:	d6 94       	lsr	r13
 332:	c7 94       	ror	r12
 334:	07 94       	ror	r0
 336:	dc 2c       	mov	r13, r12
 338:	c0 2c       	mov	r12, r0
 33a:	c8 2a       	or	r12, r24
 33c:	c0 82       	st	Z, r12
	
	uint8_t upm_bits = (uart_params->paridad) & 0x03;
 33e:	49 85       	ldd	r20, Y+9	; 0x09
	UCSR0C |= (((upm_bits & 0x02) >> 1) << UPM01) | ((upm_bits & 0x01) << UPM00);
 340:	e2 ec       	ldi	r30, 0xC2	; 194
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	30 81       	ld	r19, Z
 346:	84 2f       	mov	r24, r20
 348:	82 70       	andi	r24, 0x02	; 2
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	82 95       	swap	r24
 356:	92 95       	swap	r25
 358:	90 7f       	andi	r25, 0xF0	; 240
 35a:	98 27       	eor	r25, r24
 35c:	80 7f       	andi	r24, 0xF0	; 240
 35e:	98 27       	eor	r25, r24
 360:	40 fb       	bst	r20, 0
 362:	ee 24       	eor	r14, r14
 364:	e0 f8       	bld	r14, 0
 366:	f1 2c       	mov	r15, r1
 368:	ee 0c       	add	r14, r14
 36a:	ff 1c       	adc	r15, r15
 36c:	ee 0c       	add	r14, r14
 36e:	ff 1c       	adc	r15, r15
 370:	ee 0c       	add	r14, r14
 372:	ff 1c       	adc	r15, r15
 374:	ee 0c       	add	r14, r14
 376:	ff 1c       	adc	r15, r15
 378:	e8 2a       	or	r14, r24
 37a:	e3 2a       	or	r14, r19
 37c:	e0 82       	st	Z, r14
	UCSR0C |= (uart_params->bit_de_parada << USBS0);
 37e:	30 81       	ld	r19, Z
 380:	9a 85       	ldd	r25, Y+10	; 0x0a
 382:	89 2f       	mov	r24, r25
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	83 2b       	or	r24, r19
 394:	80 83       	st	Z, r24
	UCSR0C |= (((long_caracter & 0x02) >> 1) << UCSZ01) | ((long_caracter & 0x01) << UCSZ00);
 396:	30 81       	ld	r19, Z
 398:	82 2f       	mov	r24, r18
 39a:	82 70       	andi	r24, 0x02	; 2
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	95 95       	asr	r25
 3a0:	87 95       	ror	r24
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	02 2f       	mov	r16, r18
 3ac:	01 70       	andi	r16, 0x01	; 1
 3ae:	10 e0       	ldi	r17, 0x00	; 0
 3b0:	00 0f       	add	r16, r16
 3b2:	11 1f       	adc	r17, r17
 3b4:	08 2b       	or	r16, r24
 3b6:	03 2b       	or	r16, r19
 3b8:	00 83       	st	Z, r16
	UCSR0C |= (1 << UCPOL0);
 3ba:	80 81       	ld	r24, Z
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	80 83       	st	Z, r24
}
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	08 95       	ret

000003d2 <UART0_Leer_Byte>:

/* Funcion para leer un byte del terminal serial */
unsigned char UART0_Leer_Byte (void)
{
	if (UCSR0A & (1 << RXC0))
 3d2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3d6:	88 23       	and	r24, r24
 3d8:	1c f4       	brge	.+6      	; 0x3e0 <UART0_Leer_Byte+0xe>
	{
		return UDR0;
 3da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3de:	08 95       	ret
	} 
	else
	{
		return 0;
 3e0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 3e2:	08 95       	ret

000003e4 <UART0_Escribir_Byte>:

/* Función para escribir un dato por el terminal serial*/
void UART0_Escribir_Byte (unsigned char dato)
{
	while (!(UCSR0A & (1 << UDRE0))); // Bucle mientras el registro UDR0 esté vacio
 3e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3e8:	95 ff       	sbrs	r25, 5
 3ea:	fc cf       	rjmp	.-8      	; 0x3e4 <UART0_Escribir_Byte>
	UDR0 = dato;
 3ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3f0:	08 95       	ret

000003f2 <UART0_Escribir_Cadena>:
}

/* Funcion para escribir una cadena de datos */
void UART0_Escribir_Cadena (char *cadena)
{
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	8c 01       	movw	r16, r24
	uint16_t contador_item_cadena = 0;
 3fc:	c0 e0       	ldi	r28, 0x00	; 0
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
	while (cadena[contador_item_cadena] != '\0')
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		UART0_Escribir_Byte(cadena[contador_item_cadena]);
 402:	f0 df       	rcall	.-32     	; 0x3e4 <UART0_Escribir_Byte>
		contador_item_cadena++;
 404:	21 96       	adiw	r28, 0x01	; 1

/* Funcion para escribir una cadena de datos */
void UART0_Escribir_Cadena (char *cadena)
{
	uint16_t contador_item_cadena = 0;
	while (cadena[contador_item_cadena] != '\0')
 406:	f8 01       	movw	r30, r16
 408:	ec 0f       	add	r30, r28
 40a:	fd 1f       	adc	r31, r29
 40c:	80 81       	ld	r24, Z
 40e:	81 11       	cpse	r24, r1
 410:	f8 cf       	rjmp	.-16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		UART0_Escribir_Byte(cadena[contador_item_cadena]);
		contador_item_cadena++;
	}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	08 95       	ret

0000041c <__udivmodsi4>:
 41c:	a1 e2       	ldi	r26, 0x21	; 33
 41e:	1a 2e       	mov	r1, r26
 420:	aa 1b       	sub	r26, r26
 422:	bb 1b       	sub	r27, r27
 424:	fd 01       	movw	r30, r26
 426:	0d c0       	rjmp	.+26     	; 0x442 <__udivmodsi4_ep>

00000428 <__udivmodsi4_loop>:
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	ee 1f       	adc	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	a2 17       	cp	r26, r18
 432:	b3 07       	cpc	r27, r19
 434:	e4 07       	cpc	r30, r20
 436:	f5 07       	cpc	r31, r21
 438:	20 f0       	brcs	.+8      	; 0x442 <__udivmodsi4_ep>
 43a:	a2 1b       	sub	r26, r18
 43c:	b3 0b       	sbc	r27, r19
 43e:	e4 0b       	sbc	r30, r20
 440:	f5 0b       	sbc	r31, r21

00000442 <__udivmodsi4_ep>:
 442:	66 1f       	adc	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	88 1f       	adc	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	1a 94       	dec	r1
 44c:	69 f7       	brne	.-38     	; 0x428 <__udivmodsi4_loop>
 44e:	60 95       	com	r22
 450:	70 95       	com	r23
 452:	80 95       	com	r24
 454:	90 95       	com	r25
 456:	9b 01       	movw	r18, r22
 458:	ac 01       	movw	r20, r24
 45a:	bd 01       	movw	r22, r26
 45c:	cf 01       	movw	r24, r30
 45e:	08 95       	ret

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
